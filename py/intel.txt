# Function comes from Intel's documentation:
#
# CHAPTER 5 INSTRUCTION SET REFERENCE, V-Z 5.1 TERNARY BIT VECTOR LOGIC TABLE
#
# Excerpts:
#
# The three input bit source data will be denoted with the capital letters: A,
# B, C; where A represents a bit from the first source operand (also the
# destination operand), B and C represent a bit from the 2nd and 3rd source
# operands.
#
# Each expression consists of either a unary or binary boolean operator and
# associated operands. Each binary boolean operator is expressed in lowercase
# letters, and operands concatenated after the logic operator. The unary
# operator ‘not’ is expressed using ‘!’.  Additionally, the conditional
# expression “A?B:C” expresses a result returning B if A is set, returning C
# otherwise.
#
# A binary boolean operator is followed by two operands, e.g. andAB. For a
# compound binary expression that contain commutative components and comprising
# the same logic operator, the 2nd logic operator is omitted and three operands
# can be concatenated in sequence, e.g. andABC. When the 2nd operand of the
# first binary boolean expres- sion comes from the result of another boolean
# expression, the 2nd boolean expression is concatenated after the uppercase
# operand of the first logic expression, e.g. norBnandAC. When the result is
# independent of an operand, that operand is omitted in the logic expression,
# e.g. zeros or norCB.
#
# The 3-input expression “majorABC” returns 0 if two or more input bits are 0,
# returns 1 if two or more input bits are 1. The 3-input expression “minorABC”
# returns 1 if two or more input bits are 0, returns 0 if two or more input
# bits are 1.
#
# Note:
# 
# I replaced three-argument functions with binary functions.
#
# Here is my attempt to express functions major and minor with basic functors.
#
#   A B C | majorABC | minorABC
#   0 0 0 | 0        | 1
#   0 0 1 | 0        | 1
#   0 1 0 | 0        | 1
#   0 1 1 | 1        | 0
#   1 0 0 | 0        | 1
#   1 0 1 | 1        | 0
#   1 1 0 | 1        | 0
#   1 1 1 | 1        | 0
#
#   majorABC = A?orBC:andBC
#   minorABC = A?norBC:nandBC = !A?orBC:andBC  # my parser accepts it

00 FALSE
### 01 norABC
01 norAorBC
02 andCnorBA
03 norBA
04 andBnorAC
05 norCA
### 06 norAxnorBC -> simplified
06 and!AxorBC
07 norAandBC
### 08 norAnandBC -> simplified
08 and!AandBC
09 norAxorBC
0a andC!A
### 0b C?!A:norBA -> simplified
0b and!AnandB!C
0c andB!A
### 0d B?!A:norAC -> simplified
0d and!Anand!BC
### 0e norAnorBC -> simplified: !A and (B or C)
0e and!AorBC
0f !A
10 andAnorBC
11 norCB
### 12 norBxnorAC -> simplified: !B and (A xor C)
12 and!BxorAC
13 norBandAC
14 norCxnorBA
15 norCandBA
16 A?norBC:xorBC
### 17 minorABC -> expressed using basic functions
### 17 !A?orBC:andBC -> simplified: (B nor C) or (!A and (B xor C))
17 ornorBCand!AxorBC
18 A?norBC:andBC
### 19 A?norBC:xnorBC -> simplified: !((B xor C) xor (A and B and C))
19 !xorxorBCandAandBC
1a A?norBC:C
1b C?!A:!B
1c A?norBC:B
1d B?!A:!C
1e xorAorBC
1f nandAorBC
### 20 norBnandAC -> simplified
20 andAand!BC
21 norBxorAC
22 andC!B
### 23 C?!B:norBA -> simplified: !B and ((A and C) or !A)
23 and!Bor!AandAC
### 24 B?norAC:andAC -> simplified: (B xor C) and (A xor B)
24 andxorBCxorAB
### 25 B?norAC:xnorAC -> simplified
25 A?and!BC:!C
26 B?norAC:C
27 C?!B:!A
28 andCxorBA
29 C?xorBA:norBA
2a andCnandBA
2b C?nandBA:norBA
2c B?!A:andAC
### 2d B?!A:xnorAC -> simplified: (B or !C) xor A
2d xorAorB!C
### 2e B?!A:C -> simplified: (B or C) xor (A and B)
2e xororBCandAB
### 2f C?nandBA:!A -> simplified
2f or!Aand!BC
30 andA!B
### 31 A?!B:norBC -> simplified
31 ornorBCandA!B
### 32 norBnorAC -> simplified: !B and (A or (!A and C))
32 and!BorAand!AC
33 !B
34 B?norAC:A
35 A?!B:!C
36 xorBorAC
37 nandBorAC
38 A?!B:andBC
39 A?!B:xnorBC
3a A?!B:C
### 3b C?nandBA:!B -> simplified: !B or (!A and B and C)
3b or!Band!AandBC
3c xorBA
### 3d C?xorBA:nandBA -> simplified
### 3d A?!B:orB!C -> simplified furher: (A xor B) or (A nor C)
3d orxorABnorAC
3e A?!B:orBC
3f nandBA
### 40 norCnandBA -> simplified
40 and!CandBA
41 norCxorBA
### 42 C?norBA:andBA -> simplified: (B xor C) and !(A xor B)
42 andxorBCxnorAB
### 43 C?norBA:xnorBA -> simplified
43 A?andB!C:!B
44 andB!C
### 45 B?!C:norAC -> simplified: !C and (!A or (A and B))
45 and!Cor!AandAB
46 C?norBA:B
47 B?!C:!A
48 andBxorAC
49 B?xorAC:norAC
4a C?!A:andBA
### 4b B?xorAC:!A -> simplified
4b xorAor!BC
4c andBnandAC
4d B?nandAC:norAC
4e C?!A:B
### 4f B?nandAC:!A -> simplified
4f or!AandB!C
50 andA!C
### 51 A?!C:norBC -> simplified: (B nor C) or (A and !C)
51 ornorBCandA!C
52 C?norBA:A
53 A?!C:!B
### 54 norCnorBA -> simplified: !C and (A or B)
54 and!CorAB
55 !C
56 xorCorBA
57 nandCorBA
58 A?!C:andBC
59 A?!C:xnorBC
5a xorCA
### 5b B?xorAC:nandAC -> simplified
5b A?!C:or!BC
5c A?!C:B
### 5d B?nandAC:!C -> simplified: !C or (!A and B)
5d or!Cand!AB
5e A?!C:orBC
5f nandCA
60 andAxorBC
61 A?xorBC:norBC
62 C?!B:andBA
63 A?xorBC:!B
### 64 B?!C:andAC -> simplified: (B xor C) and (A or B)
64 andxorBCorAB
65 A?xorBC:!C
66 xorCB
### 67 A?xorBC:nandBC -> simplified
67 orxorBCnorAB
68 A?xorBC:andBC
### 69 xnorABC ERROR?
69 xnorAxorBC
6a xorCandBA
6b C?nandBA:xnorBA
6c xorBandAC
6d B?nandAC:xnorAC
6e B?nandAC:C
6f nandAxnorBC
70 andAnandBC
### 71 A?nandBC:norBC -> simplified: (B nor C) or (A and (B xor C))
71 ornorBCandAxorBC
72 C?!B:A
### 73 A?nandBC:!B -> simplified: !B or (A and !C)
73 or!BandA!C
74 B?!C:A
### 75 A?nandBC:!C -> simplified: !C or (A and !B)
75 or!CandA!B
76 B?!C:orAC
77 nandCB
78 xorAandBC
79 A?nandBC:xnorBC
7a A?nandBC:C
### 7b nandBxnorAC -> simplified: !B or (A xor C)
7b or!BxorAC
### 7c A?nandBC:B -> simplified: (B xor A) or (A and !C)
7c orxorABandA!C
7d nandCxnorBA
### 7e A?nandBC:orBC -> simplified (A xor (B and C)) or (!A and (B or C))
7e orxorAandBCand!AorBC
### 7f nandABC -> conversion from 3-arg form into 2-arg form
7f nandAnandBC
### 80 andABC -> conversion from 3-arg form into 2-arg form
80 andAandBC
81 A?andBC:norBC
82 andCxnorBA
83 A?andBC:!B
84 andBxnorAC
85 A?andBC:!C
86 A?andBC:xorBC
87 xnorAandBC
88 andCB
89 B?C:norAC
### 8a A?andBC:C -> simplified: (B and C) or (!A and C)
8a orandBCand!AC
8b B?C:!A
### 8c A?andBC:B -> simplified: (B and C) or (!A and B)
8c orandBCand!AB
8d C?B:!A
### 8e A?andBC:orBC -> simplified: (B and C) or (!A and (B xor C))
8e orandBCand!AxorBC
### 8f nandAnandBC -> simplified: (B and C) or !A
8f or!AandBC
90 andAxnorBC
91 B?andAC:!C
92 B?andAC:xorAC
93 xnorBandAC
94 C?andBA:xorBA
95 xnorCandBA
### 96 orABC ERROR: xorABC
96 xorAxorBC
97 A?xnorBC:nandBC
### 98 A?xnorBC:andBC -> simplified: (B and C) or (A and (B nor C))
98 orandBCandAnorBC
99 xnorCB
9a A?xnorBC:C
9b B?C:nandAC
9c A?xnorBC:B
9d C?B:nandBA
9e A?xnorBC:orBC
9f nandAxorBC
a0 andCA
a1 A?C:norBC
### a2 B?andAC:C -> simplified: C and (A or !B)
a2 andCorA!B
a3 A?C:!B
a4 B?xnorAC:andAC
a5 xnorCA
a6 A?C:xorBC
a7 A?C:nandBC
a8 andCorAB
a9 xnorCorBA
aa C
ab orCnorBA
ac A?C:B
ad C?orBA:!A
ae A?C:orBC
af orC!A
b0 B?andAC:A
b1 C?A:!B
b2 B?andAC:orAC
### b3 nandBnandAC -> simplified
b3 or!BandAC
### b4 B?xnorAC:A -> simplified
b4 xorAandB!C
b5 C?A:nandBA
b6 B?xnorAC:orAC
b7 nandBxorAC
b8 B?C:A
### b9 C?orBA:!B -> simplified: (B xor C) or (A nad !B)
b9 orxnorBCandA!B
### ba B?C:orAC -> simplified
ba orCandA!B
bb orC!B
### bc C?orBA:xorBA -> simplified
bc A?nandB!C:B
bd C?orBA:nandBA
be orCxorBA
bf orCnandBA
c0 andBA
c1 A?B:norBC
### c2 C?xnorBA:andBA -> simplified
c2 A?B:and!BC
c3 xnorBA
c4 C?andBA:B
c5 A?B:!C
c6 A?B:xorBC
c7 A?B:nandBC
c8 andBorAC
c9 xnorBorAC
ca A?B:C
cb B?orAC:!A
cc B
cd orBnorAC
### ce A?B:orBC -> simplified: B or !(A and C)
ce orBnandAC
cf orB!A
### d0 C?andBA:A -> simplified
d0 andAorB!C
### d1 B?A:!C -> no condition
d1 ornorBCandAB
### d2 B?A:xorAC -> simplified: A xor (!B and C)
d2 xorAand!BC
d3 B?A:nandAC
### d4 C?andBA:orBA -> simplified: (B and !C) or (A and (B xor C))
d4 orandB!CandAxnorBC
### d5 nandCnandBA -> simplified
d5 or!CandAB
d6 C?xnorBA:orBA
d7 nandCxorBA
d8 C?B:A
### d9 B?orAC:!C -> simplified: !(B xor C) or (A and B)
d9 orxnorBCandAB
da B?orAC:xorAC
db B?orAC:nandAC
dc C?B:orBA
dd orB!C
de orBxorAC
df orBnandAC
e0 andAorBC
e1 xnorAorBC
e2 B?A:C
e3 A?orBC:!B
e4 C?A:B
e5 A?orBC:!C
e6 A?orBC:xorBC
e7 A?orBC:nandBC
### e8 majorABC -> rewritten
e8 A?orBC:andBC
e9 A?orBC:xnorBC
ea orCandBA
eb orCxnorBA
ec orBandAC
ed orBxnorAC
ee orCB
### ef nandAnorBC -> simplified
ef or!AorBC
f0 A
f1 orAnorBC
### f2 B?A:orAC -> simplified
f2 orAand!BC
f3 orA!B
### f4 C?A:orBA -> simplified
f4 orAandB!C
f5 orA!C
f6 orAxorBC
f7 orAnandBC
f8 orAandBC
f9 orAxnorBC
fa orCA
### fb nandBnorAC -> simplified
fb orAor!BC
fc orBA
### fd nandCnorBA -> simplified
fd or!CorAB
### fe orABC
fe orAorBC
ff TRUE
